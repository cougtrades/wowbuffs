const fetch = require('node-fetch');

exports.handler = async function(event, context) {
    try {
        const token = process.env.GITHUB_TOKEN;
        if (!token) {
            return {
                statusCode: 500,
                body: JSON.stringify({ error: 'GitHub token not configured' })
            };
        }

        // Get current date and calculate cutoff date (1 day ago)
        const now = new Date();
        const cutoffDate = new Date(now.getTime() - (24 * 60 * 60 * 1000)); // 1 day ago

        // Process both faction files
        const factions = ['horde', 'alliance'];
        const results = {};

        for (const faction of factions) {
            const path = faction === 'horde' ? 'horde_buffs.json' : 'alliance_buffs.json';
            
            // Fetch current file content and SHA
            const fileResponse = await fetch(`https://api.github.com/repos/cougtrades/wowbuffs/contents/${path}`, {
                headers: {
                    Authorization: `token ${token}`,
                    Accept: 'application/vnd.github.v3+json'
                }
            });
            const fileData = await fileResponse.json();
            if (!fileResponse.ok) {
                throw new Error(`Failed to fetch ${faction} file: ${fileData.message}`);
            }

            const currentContent = JSON.parse(Buffer.from(fileData.content, 'base64').toString('utf8'));
            
            // Filter out old entries
            const oldEntries = currentContent.filter(buff => new Date(buff.datetime) < cutoffDate);
            const newContent = currentContent.filter(buff => new Date(buff.datetime) >= cutoffDate);

            // If there are entries to remove, update the file
            if (oldEntries.length > 0) {
                const updateResponse = await fetch(`https://api.github.com/repos/cougtrades/wowbuffs/contents/${path}`, {
                    method: 'PUT',
                    headers: {
                        Authorization: `token ${token}`,
                        Accept: 'application/vnd.github.v3+json'
                    },
                    body: JSON.stringify({
                        message: `Cleanup ${faction} buffs: Remove ${oldEntries.length} old entries`,
                        content: Buffer.from(JSON.stringify(newContent, null, 4)).toString('base64'),
                        sha: fileData.sha
                    })
                });

                if (!updateResponse.ok) {
                    throw new Error(`Failed to update ${faction} file: ${(await updateResponse.json()).message}`);
                }

                results[faction] = {
                    removed: oldEntries.length,
                    remaining: newContent.length,
                    removedEntries: oldEntries
                };
            } else {
                results[faction] = {
                    removed: 0,
                    remaining: currentContent.length,
                    message: 'No old entries to remove'
                };
            }
        }

        return {
            statusCode: 200,
            body: JSON.stringify({
                message: 'Cleanup completed successfully',
                results
            })
        };
    } catch (error) {
        console.error('Error in cleanup-buffs:', error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: error.message })
        };
    }
}; 
